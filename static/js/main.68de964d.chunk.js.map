{"version":3,"sources":["components/Post/Post.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","enum/ErrorMessage.ts","components/NewCommentForm.tsx","api/comments.ts","components/Comment/Comment.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostItem","postItem","post","setSelectedPost","selectedPost","id","title","className","type","onClick","PostsList","userPosts","map","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorMessage","client","NewCommentForm","postId","setComments","useState","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","setBody","bodyError","setBodyError","isLoading","setIsLoading","onSubmit","event","preventDefault","preparedName","trim","preparedEmail","preparedBody","comment","newComment","addedComment","prev","finally","onReset","htmlFor","placeholder","classNames","value","onChange","target","CommentItem","deleteComment","href","PostDetails","comments","error","setError","showForm","setShowForm","useEffect","catch","Comments","commentId","length","newComments","filter","deleteComments","UserSelector","users","selectedUser","setSelectedUser","showMenu","setShowMenu","pickUserHandler","user","role","App","setUsers","setUserPosts","errorMessage","setErrorMessage","Users","userId","Posts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68de964d.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  post: Post,\n  setSelectedPost: (post: Post | null) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  setSelectedPost,\n  selectedPost,\n}) => {\n  const { id, title } = post;\n\n  const handleSelectPost = (postItem: Post) => () => {\n    setSelectedPost(postItem);\n  };\n\n  const handleResetPost = () => {\n    setSelectedPost(null);\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        {id === selectedPost?.id\n          ? (\n            <button\n              type=\"button\"\n              data-cy=\"PostButton\"\n              className=\"button is-link\"\n              onClick={handleResetPost}\n            >\n              Close\n            </button>\n          )\n          : (\n            <button\n              type=\"button\"\n              data-cy=\"PostButton\"\n              className=\"button is-link is-light\"\n              onClick={handleSelectPost(post)}\n            >\n              Open\n            </button>\n\n          )}\n\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './Post/Post';\n\ntype Props = {\n  userPosts: Post[] | null,\n  setSelectedPost: (post: Post | null) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {userPosts?.map(post => (\n          <PostItem\n            key={post.id}\n            post={post}\n            setSelectedPost={setSelectedPost}\n            selectedPost={selectedPost}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorMessage {\n  None = '',\n  Users = 'Could not download users',\n  Posts = 'Could not download posts',\n  Comments = 'Could not download comments',\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { addComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number,\n  setComments: React.Dispatch<React.SetStateAction<Comment []>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n}) => {\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [body, setBody] = useState('');\n  const [bodyError, setBodyError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNameEnter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setNameError(false);\n  };\n\n  const handleEmailEnter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setEmailError(false);\n  };\n\n  const handleBodyEnter = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n    setBodyError(false);\n  };\n\n  const handleReset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setNameError(false);\n    setEmailError(false);\n    setBodyError(false);\n    setIsLoading(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const preparedName = name.trim();\n    const preparedEmail = email.trim();\n    const preparedBody = body.trim();\n\n    if (!preparedName) {\n      setNameError(true);\n    }\n\n    if (!preparedEmail) {\n      setEmailError(true);\n    }\n\n    if (!preparedBody) {\n      setBodyError(true);\n    }\n\n    if (!preparedName || !preparedEmail || !preparedBody) {\n      return;\n    }\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    setIsLoading(true);\n\n    addComment(newComment)\n      .then((addedComment) => setComments(prev => [...prev, addedComment]))\n      .finally(() => {\n        setIsLoading(false);\n        setBody('');\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': nameError,\n            })}\n            value={name}\n            onChange={handleNameEnter}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': emailError,\n            })}\n            value={email}\n            onChange={handleEmailEnter}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': bodyError,\n            })}\n            value={body}\n            onChange={handleBodyEnter}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment []>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComments = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React from 'react';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  deleteComment: (commentId: number) => () => void,\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment, deleteComment }) => {\n  const { name, body, id } = comment;\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={deleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComments, getComments } from '../api/comments';\nimport { ErrorMessage } from '../enum/ErrorMessage';\nimport { CommentItem } from './Comment/Comment';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { title, body, id } = post;\n  const [comments, setComments] = useState<Comment []>([]);\n  const [error, setError] = useState<ErrorMessage | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showForm, setShowForm] = useState<number | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getComments(id)\n      .then(setComments)\n      .catch(() => setError(ErrorMessage.Comments))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [post]);\n\n  const deleteComment = (commentId: number) => () => {\n    if (comments && comments?.length > 0) {\n      const newComments = comments?.filter(comment => comment.id !== commentId);\n\n      setComments(newComments);\n\n      deleteComments(commentId)\n        .then(() => setComments(newComments));\n    }\n  };\n\n  const handleShowForm = (commentId: number) => () => {\n    setShowForm(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (<Loader />)}\n\n          {error === ErrorMessage.Comments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments && comments.length > 0\n          && (<p className=\"title is-4\">Comments:</p>)}\n\n          {comments?.map(comment => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              deleteComment={deleteComment}\n            />\n          ))}\n\n          {showForm !== id\n            ? (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleShowForm(id)}\n              >\n                Write a comment\n              </button>\n            )\n            : (\n              <NewCommentForm\n                postId={id}\n                setComments={setComments}\n              />\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n\n  const pickUserHandler = (user: User) => () => {\n    setSelectedUser(user);\n    setShowMenu(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': showMenu,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setShowMenu(!showMenu)}\n        >\n          {selectedUser?.name ?? <span>Choose a user</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={pickUserHandler(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { ErrorMessage } from './enum/ErrorMessage';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post [] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<ErrorMessage | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUsers()\n      .then(setUsers)\n      .catch(() => setErrorMessage(ErrorMessage.Users))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (selectedUser?.id) {\n      getPosts(selectedUser?.id)\n        .then(setUserPosts)\n        .catch(() => setErrorMessage(ErrorMessage.Posts))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (<Loader />)}\n\n                {userPosts && userPosts.length > 0 && (\n                  <PostsList\n                    userPosts={userPosts}\n                    setSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n\n                {errorMessage === ErrorMessage.Posts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {userPosts && !userPosts.length && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  post={selectedPost}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}